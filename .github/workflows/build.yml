# Workflow to build alice-tools for Linux and Windows platforms
# Triggered on tag pushes in the format "x.y.z"
name: Build alice-tools

on:
  push:
    tags:
      - "*.*.*"

env:
  PACKAGE_PREFIX: alice-tools

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bison \
            flex \
            meson \
            libpng-dev \
            libturbojpeg0-dev \
            libwebp-dev \
            zlib1g-dev \
            ninja-build

      - name: Configure (Meson) and build (Ninja)
        run: |
          mkdir build
          meson build
          ninja -C build

      - name: Package binaries
        id: package
        run: |
          # Extract version from git tag, fallback to 'dev' if not tagged
          VERSION=${GITHUB_REF#refs/tags/}
          [[ "$VERSION" == "$GITHUB_REF" ]] && VERSION="dev"

          RELEASE_DIR="${PACKAGE_PREFIX}-${VERSION}"
          ARCHIVE_NAME="${PACKAGE_PREFIX}-${PLATFORM}-${VERSION}.tar.gz"

          mkdir "$RELEASE_DIR"
          cp build/src/alice "$RELEASE_DIR"
          cp README* "$RELEASE_DIR/"

          tar czvf "$ARCHIVE_NAME" -C "$RELEASE_DIR" .

          # Export variables for subsequent steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "UPLOAD_FILE=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      # Upload built artifacts for release creation
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_PREFIX }}-${{ env.PLATFORM }}-${{ env.VERSION }}
          path: ${{ steps.package.outputs.UPLOAD_FILE }}

  build-windows:
    runs-on: windows-latest
    env:
      PLATFORM: win64
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            flex
            bison
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-declarative
            mingw-w64-x86_64-qt5-tools
            mingw-w64-x86_64-qt5-imageformats
            mingw-w64-x86_64-qt5-quickcontrols2
            mingw-w64-x86_64-pcre2
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-dlfcn
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-libiconv
            mingw-w64-x86_64-libwinpthread

      - name: Configure (Meson) and build (Ninja)
        run: |
          mkdir build
          meson build
          ninja -C build

      # Deploy Qt dependencies (for galice)
      - name: Deploy Qt
        run: |
          mkdir galice
          cp build/src/galice.exe galice/
          windeployqt --no-translations --no-svg --no-system-d3d-compiler --no-opengl-sw --no-angle galice/galice.exe

          # Find missing DLLs
          echo "Checking missing dependencies..."
          ldd galice/galice.exe | grep "not found" || true

          # Copy missing MinGW dependencies
          for dll in $(ldd galice/galice.exe | grep mingw64 | awk '{print $3}'); do
            cp -v "$dll" galice/ || true
          done

          # Verify all required DLLs are present
          echo "Final dependency check..."
          ldd galice/galice.exe | grep "not found" || true

      - name: Package binaries
        id: package
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          [[ "$VERSION" == "$GITHUB_REF" ]] && VERSION="dev"

          RELEASE_DIR="${PACKAGE_PREFIX}-${VERSION}"
          ARCHIVE_NAME="${PACKAGE_PREFIX}-${PLATFORM}-${VERSION}.zip"

          mkdir "$RELEASE_DIR"
          cp build/src/alice.exe "$RELEASE_DIR/"
          cp -r galice "$RELEASE_DIR/"
          cp README* "$RELEASE_DIR/"

          7z a "$ARCHIVE_NAME" -r "$RELEASE_DIR"/*

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "UPLOAD_FILE=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_PREFIX }}-${{ env.PLATFORM }}-${{ env.VERSION }}
          path: ${{ steps.package.outputs.UPLOAD_FILE }}

  create-release:
    needs: [build-ubuntu, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Set version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          [[ "$VERSION" == "$GITHUB_REF" ]] && VERSION="dev"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_PREFIX }}-linux-${{ env.VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_PREFIX }}-win64-${{ env.VERSION }}

      - uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.PACKAGE_PREFIX }} ${{ env.VERSION }}
          body: |
            This release contains the latest builds of alice-tools for Linux and Windows.
          files: |
            ${{ env.PACKAGE_PREFIX }}-linux-${{ env.VERSION }}.tar.gz
            ${{ env.PACKAGE_PREFIX }}-win64-${{ env.VERSION }}.zip